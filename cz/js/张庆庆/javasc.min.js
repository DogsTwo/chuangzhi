//获取ID，类，标签
/*
获取ID的方法 var oId = $('#要获取的id')
获取标签的方法 var oTag = $('要获取的标签')
获取ID的方法 var oClass = $('.要获取的class')
 */
function $(a){
   	var c=a.substring(0,1);
   	if(c=="#"){
      	return document.getElementById(a.substring(1,a.length));
    }else{
    	var ClassArr=[];
    	if(c=='.'){
    		for(var i=0;i<document.getElementsByClassName(a.substring(1,a.length)).length;i++){
    			ClassArr.push(document.getElementsByClassName(a.substring(1,a.length))[i])
    		}
    		return ClassArr;
    	}else{
    		for(var i=0;i<document.getElementsByTagName(a.substring(0,a.length)).length;i++){
    			ClassArr.push(document.getElementsByTagName(a.substring(0,a.length))[i])
    		}
    		return ClassArr;
    	}
  	}
}
//获取多个相同的class类名
function $$(a){
	return document.querySelectorAll(a);
}
//节点克隆  obj是克隆元素  boor：有两个值  true和false 深客隆和浅客隆
function $clone(obj,boor){
	return obj.cloneNode(boor);
}
//删除对象属性  obj所要删除的对象，Pro希望移除的属性的名称
function $DelPro(obj,Pro){
	return obj.removeAttribute(Pro)
}
//得到对象的属性的值  
function $GetPro_(obj,Pro){
	return obj.getAttribute(Pro)
}
//得到对象的属性和属性的值
function $_GetPro_(obj,Pro){
	return obj.getAttributeNode(Pro)
}
//得到对象的属性
function $_GetPro(obj,Pro){
	return obj.getAttributeNode(Pro).nodeName
}
//a.style   获取元素样式
function $s(a){
	return a.style
}

//不循环轮播
function CarouselPosLeft(a,b,c){
	$s(a).left = -b*c + 'px'
}


//获取所有兄弟，包括自己
function BrotherAndMe(a,b){
	var dad = a.parentNode;
		for (var i=0;i<dad.childElementCount;i++) {
				b.push(dad.children[i])
		}
	return b;							
}
//获取所有兄弟节点，除了自己
function Brother(a,b){
	var dad = a.parentNode;
		for (var i=0;i<dad.childElementCount;i++) {
			if (a!=dad.children[i]) {
				b.push(dad.children[i])
			}
		}
	return b;
}
//同class的非自己的兄弟节点
function BrotherClass(a,b,classname){
	var dad = a.parentNode;
		for (var i=0;i<dad.childElementCount;i++) {
			if (a!=dad.children[i]&&dad.children[i].className==classname) {
				b.push(dad.children[i])
			}
		}
	return b;
}


//获取元素样式
function getStyle(obj,Style){
	if (obj.currentStyle) {
		return obj.currentStyle[Style];
	} else{
		return getComputedStyle(obj,false)[Style]
	}
}
//定位对象
function Position(X,Y,OBJ){
	OBJ.style.left = X + 'px';
	OBJ.style.top = Y + 'px';
}
//增加元素行内样式
function setStyle(el,strCss){
    var sty = el.style;
    sty.cssText = sty.cssText + strCss;
}
//替换元素行内样式
function ReStyle(el,strCss){
    return el.style.cssText=strCss;
}
//class的增加
function setClass(el,class_){
    var sty = el.className;
    el.className = sty +' ' + class_;
}
//class的增加
function ReClass(el,class_){
    el.className =class_;
}
//class的删除
function RemoveClass(element,cName){ //删除一个class 保留其余的
	if(hasClass(element,cName)){　　//存在就替换
		element.className = element.className.replace(
		new RegExp('(\\s|^)'+cName+'(\\s|$)')," ");//在匹配的时候是去掉了空白的，故换掉的时候添加一个空白
	}
}